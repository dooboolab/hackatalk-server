# import User from "user.graphql"
# import Auth from "auth.graphql"
# import Notification from "notification.graphql"
# import Channel from "channel.graphql"
# import Message from "message.graphql"
# import Friend from "friend.graphql"
# import Membership from "membership.graphql"
# import Photo from "photo.graphql"
# import Gallery from "gallery.graphql"

type Query {
  """
  If filter is true, it will filter user with email, nickname or name.
  You can add pagination with first and after args.
  """
  users(
    user: UserQueryInput
    includeUser: Boolean
    """
    It will filter `user` with email, nickname or name. with `user` parameter
    """
    filter: Boolean
    """
    Pagination: The number of results to show. Must be >= 1
    """
    first: Int
    """
    Pagination: The number of results to show. Must be >= 1
    """
    last: Int
    """
    Pagination: If you add a cursor here, it will only return results `before` this cursor
    """
    before: String
    """
    Pagination: If you add a cursor here, it will only return results `after` this cursor
    """
    after: String
  ): UsersConnection
  user(id: ID!): User
  me: User
  messages: [Message!]!
  channels: [Channel!]!
  friends: [User!]!
  galleries(userId: String!): [Gallery!]!
}

type Mutation {
  signInEmail(email: String! password: String!): AuthPayload!
  signInWithSocialAccount(socialUser: SocialUserInput!): AuthPayload!
  signUp(user: UserInput!): AuthPayload!
  findPassword(email: String!): Boolean
  sendVerification(email: String!): Boolean
  addNotificationToken(notification: NotificationCreateInput!): Notification
  removeNotificationToken(token: String!): Int
  updateProfile(user: UserProfileInput!): User
  addFriend(friendId: ID!): User
  deleteFriend(friendId: ID!): User
  createChannel(channel: ChannelInput): Channel
  updateChannel(channel: ChannelInput): Int
  deleteChannel(channelId: ID!): Int
  """
  Create message and return channelId when meessage has successfully sent.
  Do not pass current userId inside `users`.
  """
  createMessage(users: [String!]! message: String! channelId: String): MessagePayload
  setOnlineStatus(isOnline: Boolean): Int
  changeEmailPassword(password: String! newPassword: String!): Boolean
  createGallery(photoURL: String!): Gallery
  updateGallery(galleryId: ID!, photoURL: String!): Int
  deleteGallery(galleryId: ID!): Int
}

type Subscription {
  userSignedIn: User
  userUpdated: User
  friendChanged(userId: ID!): FriendSub
}
